<?php

/**
 * @file
 * Contains ajax_solr_search.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function ajax_solr_search_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ajax_solr_search module.
    case 'help.page.ajax_solr_search':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('My Awesome Module') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function ajax_solr_search_theme(): array {
  return [
    'ajax_solr_search' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_requirements().
 */
function ajax_solr_search_requirements($phase): array {
  $library_name = 'ajax_solr';
  $library_path = '/libraries/' . $library_name;
  $library_exists = (file_exists(DRUPAL_ROOT . $library_path)) ? TRUE : FALSE;

  // If library is not found, look in the current profile libraries path.
  if (!$library_exists) {
    $profile = \Drupal::installProfile();
    $profile_path = drupal_get_path('profile', $profile);
    $profile_path .= $library_path;
    $library_exists = file_exists($profile_path);
  }

  $requirements = [];
  if (!$library_exists) {
    $arguments = [
      ':docs' => 'https://www.drupal.org/docs/8/theming-drupal-8/adding-stylesheets-css-and-javascript-js-to-a-drupal-8-theme#external',
      ':readme' => 'https://github.com/digitalutsc/drupal_ajax_solr_search/blob/main/README.md',
    ];
    $requirements['ajax_solr_search_library'] = [
      'title' => t('Ajax Solr Search Library'),
      'value' => t('The AJAX Solr library is not installed.'),
      'severity' => REQUIREMENT_ERROR,
      'description' => t('The AJAX Solr is not installed, check the <a href=":readme">README.txt for more information</a> and <a href=":docs">the documentation for information on how to install a library</a>.', $arguments),
    ];
  }

  return $requirements;
}

/**
 * Debug function: display any variable to error log.
 *
 * @param $thing
 */
if (!function_exists('print_log')) {

  /**
   * Logging in apache log.
   */
  function print_log($thing) {
    error_log(print_r($thing, TRUE), 0);
  }

}
/**
 * Debug function: display any variable to current webpage.
 *
 * @param $thing
 */
if (!function_exists('logging')) {

  /**
   * Logging in webpage.
   */
  function logging($thing) {
    echo "<pre>";
    print_r($thing);
    echo "</pre>";
  }

}

/**
 * Debug function: display any variable to drupal Reports Log messages.
 */
if (!function_exists('drupal_log')) {

  /**
   * Logging in Recent Log messages.
   */
  function drupal_log($msg, $type = "error") {
    switch ($type) {
      case "notice":
        \Drupal::logger(basename(__FILE__, '.module'))->notice($msg);
        break;

      case "log":
        \Drupal::logger(basename(__FILE__, '.module'))->log(RfcLogLevel::NOTICE, $msg);
        break;

      case "warning":
        \Drupal::logger(basename(__FILE__, '.module'))->warning($msg);
        break;

      case "alert":
        \Drupal::logger(basename(__FILE__, '.module'))->alert($msg);
        break;

      case "critical":
        \Drupal::logger(basename(__FILE__, '.module'))->critical($msg);
        break;

      case "debug":
        \Drupal::logger(basename(__FILE__, '.module'))->debug($msg);
        break;

      case "info":
        \Drupal::logger(basename(__FILE__, '.module'))->info($msg);
        break;

      case "emergency":
        \Drupal::logger(basename(__FILE__, '.module'))->emergency($msg);
        break;

      default:
        \Drupal::logger(basename(__FILE__, '.module'))->error($msg);
        break;
    }
  }

}
